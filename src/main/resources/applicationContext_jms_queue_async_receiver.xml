<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd">
	
	<description>（异步接收消息）jms 消息接收 配置（点对点模式（queue消息））</description>
	
	<!--创建连接池-->
	<bean id="jmsReceiverFactory" class="org.apache.activemq.pool.PooledConnectionFactory" destroy-method="stop">
		<property name="connectionFactory">
			<bean class="org.apache.activemq.ActiveMQConnectionFactory">
				<property name="brokerURL" value="tcp://localhost:61616"/>	<!-- 连接服务的用户名密码使用默认密码，可通过设置userName和password属性设置 -->
				<property name="useAsyncSend" value="true"/>				<!-- 异步发送 -->
			</bean>
		</property>
		<property name="maxConnections" value="100"/>
	</bean>
	
	
	<!-- #####################	点对点模式消息（queue）	##################### -->
	
	<!-- 监听方式1：-->
    <!-- 消息监听适配器对应的监听容器 -->
	<!-- <bean id="messageListenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
	  	<property name="connectionFactory" ref="jmsReceiverFactory"></property>
	  	<property name="sessionAcknowledgeMode" value="1"></property>
	  	<property name="pubSubDomain" value="false"></property>
	  	<property name="subscriptionDurable" value="true"></property>
	  	<property name="destination" ref="messageListenerQueue"></property>
	  	<property name="messageListener" ref="consumerMessageListener"></property>
	  	<property name="clientId" value="client_spring_messageListenerQueue"></property>
	</bean>
	这个是sessionAwareQueue目的地
	<bean id="messageListenerQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg index="0" value="lx.spring.queue"/>
	</bean>
	消息监听器一：使用MessageListener作为消息监听器  
    <bean id="consumerMessageListener" class="com.lx.jms.activemq.listener.ConsumerMessageListener"/>
	
	
	监听方式2：
	消息监听适配器对应的监听容器
	<bean id="sessionAwareListenerContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
	  	<property name="connectionFactory" ref="jmsReceiverFactory"></property>
	  	<property name="sessionAcknowledgeMode" value="1"></property>
	  	<property name="pubSubDomain" value="false"></property>
	  	<property name="subscriptionDurable" value="true"></property>
	  	<property name="destination" ref="sessionAwareQueue"></property>
	  	<property name="messageListener" ref="consumerSessionAwareMessageListener"></property>
	  	<property name="clientId" value="client_spring_sessionAwareQueue"></property>
	</bean>
	这个是sessionAwareQueue目的地
	<bean id="sessionAwareQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg index="0" value="lx.spring.queue"/>
	</bean>
	消息监听器二：使用可以获取session的SessionAwareMessageListener作为监听器  
    <bean id="consumerSessionAwareMessageListener" class="com.lx.jms.activemq.listener.ConsumerSessionAwareMessageListener">  
        <property name="destination" ref="sessionAwareQueue"/>
    </bean> -->
    
	
	<!-- 监听方式3：-->
	<!-- 消息监听适配器对应的监听容器 -->
	<bean id="messageListenerAdapterContainer" class="org.springframework.jms.listener.DefaultMessageListenerContainer">
	  	<property name="connectionFactory" ref="jmsReceiverFactory"></property>
	  	<property name="sessionAcknowledgeMode" value="1"></property>
	  	<property name="pubSubDomain" value="false"></property>
	  	<property name="subscriptionDurable" value="true"></property>
	  	<property name="destination" ref="adapterQueue"></property>
	  	<!-- <property name="messageListener" ref="messageListener"></property> -->
	  	<!-- <property name="messageListener" ref="sessionAwareMessageListener"></property> -->
	  	<property name="messageListener" ref="messageListenerAdapter"></property>
	  	<property name="clientId" value="client_spring_queue"></property>
	</bean>
	<!-- 用于测试消息监听适配器的队列目的地adapterQueue -->
	<bean id="adapterQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg index="0" value="lx.spring.queue"/>
	</bean>
	
	<!-- 消息监听器一：使用MessageListener作为消息监听器 -->  
    <bean id="messageListener" class="com.lx.jms.activemq.listener.ConsumerMessageListener"/>
	
	<!-- 消息监听器二：使用可以获取session的SessionAwareMessageListener作为监听器 -->  
	<bean id="sessionAwareMessageListener" class="com.lx.jms.activemq.listener.ConsumerSessionAwareMessageListener">  
		<property name="destination" ref="adapterQueue"/>
	</bean>
	
	<!-- 消息监听器三（推荐）：使用MessageListenerAdapter作为消息监听器 -->
	<bean id="messageListenerAdapter" class="org.springframework.jms.listener.adapter.MessageListenerAdapter">  
        <property name="delegate">	<!-- 通过指定一个自定义的普通的类进行消息处理 -->
        	<bean class="com.lx.jms.activemq.listener.ConsumerListener"></bean>
        </property>
        <property name="defaultListenerMethod" value="handleMessage"></property>
        <property name="messageConverter" ref="jmsConverter"></property>
    </bean>
	
	
	<!-- #####################	（自定义消息转换器）	##################### -->

	<!-- 消息转换器 -->
    <bean id="jmsConverter" class="com.lx.jms.activemq.convert.CustomJmsConverter"></bean>
	<!-- spring 内置默认的消息转换器，在未在jmsTemplate中注册自定义的messageConverter时，jmsTemplate内置默认使用SimpleMessageConverter作为消息转换器；
    	支持转换处理的消息类型： TextMessage、BytesMessage、MapMessage、MapMessage、ObjectMessage（转换的对象需要实现Serializable）
	<bean id="defaultMessageConverter" class="org.springframework.jms.support.converter.SimpleMessageConverter"></bean> -->
</beans>
