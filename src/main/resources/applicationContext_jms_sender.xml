<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
	xmlns:context="http://www.springframework.org/schema/context"
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-4.1.xsd
		http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-4.1.xsd">
		
	<description>jms 消息发送者 配置（含点对点模式（queue消息）、订阅-发布模式（topic消息））</description>
	
	<!--创建连接池-->
	<bean id="jmsSenderFactory" class="org.apache.activemq.pool.PooledConnectionFactory" destroy-method="stop">
		<property name="connectionFactory">
			<bean class="org.apache.activemq.ActiveMQConnectionFactory">
				<property name="brokerURL" value="tcp://localhost:61616"/>	<!-- 连接服务的用户名密码使用默认密码，可通过设置userName和password属性设置 -->
				<property name="useAsyncSend" value="true"/>				<!-- 异步发送 -->
				<property name="clientIDPrefix" value="client_spring_"/>	<!-- 持久化订阅需要指定clientIDPrefix； clientIDPrefix：指定了consumer的clientID的前缀，符合此前缀规则的consumer将成为该TOPIC的持久订阅者。 -->
			</bean>
		</property>
		<property name="maxConnections" value="100"/>
	</bean>
	
	
	<!-- #####################	点对点模式消息	##################### -->
	
	<!-- 1、点对点模式消息（queue）
			构造一个名称为lx.spring.queue的queue消息队列 -->
	<bean id="destinationQueue" class="org.apache.activemq.command.ActiveMQQueue">
		<constructor-arg index="0" value="lx.spring.queue"/>
	</bean>
	
	<!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 -->
	<bean id="queueJmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<property name="connectionFactory" ref="jmsSenderFactory"/>
		<!-- 设置defaultDestinationName与设置defaultDestination二选一，只设置defaultDestinationName，则Spring会根据设置的该目标名称创建一个destination
		<property name="defaultDestinationName" ref="lx.spring.queue"/> -->
		<property name="defaultDestination" ref="destinationQueue"/>
		<property name="deliveryMode" value="2"/>				<!-- 1：不持久化；2：持久化（默认） -->
		<property name="pubSubDomain" value="false"/>			<!-- pubSubDomain区别消息模式，false：点对点模式，true：订阅-发布模式 -->
		<property name="messageConverter" ref="jmsConverter"/>	<!-- 未在jmsTemplate中注册自定义的messageConverter时，jmsTemplate内置默认使用SimpleMessageConverter作为消息转换器； -->
	</bean>
	
	<!-- 消息生产者 -->
	<bean id="producer" class="com.lx.jms.activemq.queue.SpringQueueProducer">
		<property name="jmsTemplate" ref="queueJmsTemplate"/>
	</bean>
	
	
	<!-- #####################	订阅-发布模式消息		##################### -->
	
	<!-- 2、订阅-发布模式消息（topic）
			构造一个名称为lx.spring.topic的topic消息队列 -->
	<bean id="destinationTopic" class="org.apache.activemq.command.ActiveMQTopic">
		<constructor-arg index="0" value="lx.spring.topic"/>
	</bean>
	
	<!-- Spring提供的JMS工具类，它可以进行消息发送、接收等 -->
	<bean id="topicJmsTemplate" class="org.springframework.jms.core.JmsTemplate">
		<property name="connectionFactory" ref="jmsSenderFactory"/>
		<!-- 设置defaultDestinationName与设置defaultDestination二选一，只设置defaultDestinationName，则Spring会根据设置的该目标名称创建一个destination
		<property name="defaultDestinationName" ref="lx.spring.topic"/> -->
		<property name="defaultDestination" ref="destinationTopic"/>
		<property name="deliveryMode" value="2"/>				<!-- 1：不持久化；2：持久化 -->
		<property name="pubSubDomain" value="true"/>			<!-- 区别它采用的模式为false是p2p为true是订阅 -->
		<property name="messageConverter" ref="jmsConverter"/>	<!-- 未在jmsTemplate中注册自定义的messageConverter时，jmsTemplate内置默认使用SimpleMessageConverter作为消息转换器； -->
	</bean>
	
	<!-- 消息发布者 -->
	<bean id="publisher" class="com.lx.jms.activemq.topic.SpringTopicPublisher">
		<property name="jmsTemplate" ref="topicJmsTemplate"/>
	</bean>
	
	<!-- #####################	公共部分（自定义消息转换器）	##################### -->
	
	<!-- 消息转换器 -->
    <bean id="jmsConverter" class="com.lx.jms.activemq.convert.CustomJmsConverter"></bean>
    <!-- spring 内置默认的消息转换器，在未在jmsTemplate中注册自定义的messageConverter时，jmsTemplate内置默认使用SimpleMessageConverter作为消息转换器；
    	支持转换处理的消息类型： TextMessage、BytesMessage、MapMessage、MapMessage、ObjectMessage（转换的对象需要实现Serializable）
	<bean id="defaultMessageConverter" class="org.springframework.jms.support.converter.SimpleMessageConverter"></bean> -->
</beans>
